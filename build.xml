<?xml version="1.0" encoding="UTF-8"?>
<project name="opencluster" default="all">
  
  
  <property file="build.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="128m"/>
  <patternset id="ignored.files">
    <exclude name="**/CVS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/.pyc/**"/>
    <exclude name="**/.pyo/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/.sbas/**"/>
    <exclude name="**/.IJI.*/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
    <exclude name="**/*.lib/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/.bundle/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.war"/>
    <include name="*.ear"/>
    <include name="*.zip"/>
    <include name="*.swc"/>
    <include name="*.egg"/>
    <include name="*.jar"/>
  </patternset>
  <patternset id="compiler.resources">
    <include name="**/?*.properties"/>
    <include name="**/?*.xml"/>
    <include name="**/?*.gif"/>
    <include name="**/?*.png"/>
    <include name="**/?*.jpeg"/>
    <include name="**/?*.jpg"/>
    <include name="**/?*.html"/>
    <include name="**/?*.dtd"/>
    <include name="**/?*.tld"/>
    <include name="**/?*.ftl"/>
  </patternset>
  
  <!-- JDK definitions -->
  
  <property name="jdk.bin.1.7" value="${jdk.home.1.7}/bin"/>
  <path id="jdk.classpath.1.7">
    <fileset dir="${jdk.home.1.7}">
      <include name="jre/lib/alt-rt.jar"/>
      <include name="jre/lib/charsets.jar"/>
      <include name="jre/lib/deploy.jar"/>
      <include name="jre/lib/javaws.jar"/>
      <include name="jre/lib/jce.jar"/>
      <include name="jre/lib/jsse.jar"/>
      <include name="jre/lib/management-agent.jar"/>
      <include name="jre/lib/plugin.jar"/>
      <include name="jre/lib/resources.jar"/>
      <include name="jre/lib/rt.jar"/>
      <include name="jre/lib/ext/dnsns.jar"/>
      <include name="jre/lib/ext/localedata.jar"/>
      <include name="jre/lib/ext/sunec.jar"/>
      <include name="jre/lib/ext/sunjce_provider.jar"/>
      <include name="jre/lib/ext/sunmscapi.jar"/>
      <include name="jre/lib/ext/zipfs.jar"/>
    </fileset>
  </path>
  
  <property name="project.jdk.home" value="${jdk.home.1.7}"/>
  <property name="project.jdk.bin" value="${jdk.bin.1.7}"/>
  <property name="project.jdk.classpath" value="jdk.classpath.1.7"/>
  
  
  <!-- Project Libraries -->
  
  <path id="library.junit.classpath">
    <pathelement location="${basedir}/clients/java/lib/junit/junit-4.10.jar"/>
    <pathelement location="${basedir}/clients/java/lib/junit/junit-dep-4.10.jar"/>
  </path>
  <!-- Modules -->
  
  
  <!-- Module clients-java -->
  
  <dirname property="module.clients-java.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.clients-java" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.clients-java" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.clients-java" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.clients-java" value="${compiler.args}"/>
  
  <property name="clients-java.output.dir" value="${module.clients-java.basedir}/out/production/clients-java"/>
  <property name="clients-java.testoutput.dir" value="${module.clients-java.basedir}/out/test/clients-java"/>
  
  <path id="clients-java.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="clients-java.module.production.classpath">
    <path refid="${module.jdk.classpath.clients-java}"/>
    <path refid="library.junit.classpath"/>
  </path>
  
  <path id="clients-java.runtime.production.module.classpath">
    <pathelement location="${clients-java.output.dir}"/>
    <path refid="library.junit.classpath"/>
  </path>
  
  <path id="clients-java.module.classpath">
    <path refid="${module.jdk.classpath.clients-java}"/>
    <pathelement location="${clients-java.output.dir}"/>
    <path refid="library.junit.classpath"/>
  </path>
  
  <path id="clients-java.runtime.module.classpath">
    <pathelement location="${clients-java.testoutput.dir}"/>
    <pathelement location="${clients-java.output.dir}"/>
    <path refid="library.junit.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.clients-java">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.clients-java">
    <patternset refid="excluded.from.module.clients-java"/>
  </patternset>
  
  <path id="clients-java.module.sourcepath">
    <dirset dir="${module.clients-java.basedir}/clients/java">
      <include name="src"/>
    </dirset>
  </path>
  
  <path id="clients-java.module.test.sourcepath">
    <dirset dir="${module.clients-java.basedir}/clients/java">
      <include name="test"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.clients-java" depends="compile.module.clients-java.production,compile.module.clients-java.tests" description="Compile module clients-java"/>
  
  <target name="compile.module.clients-java.production" description="Compile module clients-java; production classes">
    <mkdir dir="${clients-java.output.dir}"/>
    <javac destdir="${clients-java.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.clients-java}/javac">
      <compilerarg line="${compiler.args.clients-java}"/>
      <bootclasspath refid="clients-java.module.bootclasspath"/>
      <classpath refid="clients-java.module.production.classpath"/>
      <src refid="clients-java.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.clients-java"/>
    </javac>
    
    <copy todir="${clients-java.output.dir}">
      <fileset dir="${module.clients-java.basedir}/clients/java/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.clients-java.tests" depends="compile.module.clients-java.production" description="compile module clients-java; test classes" unless="skip.tests">
    <mkdir dir="${clients-java.testoutput.dir}"/>
    <javac destdir="${clients-java.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.clients-java}/javac">
      <compilerarg line="${compiler.args.clients-java}"/>
      <bootclasspath refid="clients-java.module.bootclasspath"/>
      <classpath refid="clients-java.module.classpath"/>
      <src refid="clients-java.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.clients-java"/>
    </javac>
    
    <copy todir="${clients-java.testoutput.dir}">
      <fileset dir="${module.clients-java.basedir}/clients/java/test">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean.module.clients-java" description="cleanup module">
    <delete dir="${clients-java.output.dir}"/>
    <delete dir="${clients-java.testoutput.dir}"/>
  </target>
  
  
  <!-- Module docs -->
  
  <dirname property="module.docs.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.docs" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.docs" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.docs" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.docs" value="${compiler.args}"/>
  
  <property name="docs.output.dir" value="${module.docs.basedir}/out/production/docs"/>
  <property name="docs.testoutput.dir" value="${module.docs.basedir}/out/test/docs"/>
  
  <path id="docs.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="docs.module.production.classpath">
    <path refid="${module.jdk.classpath.docs}"/>
  </path>
  
  <path id="docs.runtime.production.module.classpath">
    <pathelement location="${docs.output.dir}"/>
  </path>
  
  <path id="docs.module.classpath">
    <path refid="${module.jdk.classpath.docs}"/>
    <pathelement location="${docs.output.dir}"/>
  </path>
  
  <path id="docs.runtime.module.classpath">
    <pathelement location="${docs.testoutput.dir}"/>
    <pathelement location="${docs.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.docs">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.docs">
    <patternset refid="excluded.from.module.docs"/>
  </patternset>
  
  
  <target name="compile.module.docs" depends="compile.module.docs.production,compile.module.docs.tests" description="Compile module docs"/>
  
  <target name="compile.module.docs.production" description="Compile module docs; production classes"/>
  
  <target name="compile.module.docs.tests" depends="compile.module.docs.production" description="compile module docs; test classes" unless="skip.tests"/>
  
  <target name="clean.module.docs" description="cleanup module">
    <delete dir="${docs.output.dir}"/>
    <delete dir="${docs.testoutput.dir}"/>
  </target>
  
  
  <!-- Module server -->
  
  <dirname property="module.server.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.server" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.server" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.server" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.server" value="${compiler.args}"/>
  
  <property name="server.output.dir" value="${module.server.basedir}/out/production/server"/>
  <property name="server.testoutput.dir" value="${module.server.basedir}/out/test/server"/>
  
  <path id="server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="server.module.production.classpath">
    <path refid="${module.jdk.classpath.server}"/>
  </path>
  
  <path id="server.runtime.production.module.classpath">
    <pathelement location="${server.output.dir}"/>
  </path>
  
  <path id="server.module.classpath">
    <path refid="${module.jdk.classpath.server}"/>
    <pathelement location="${server.output.dir}"/>
  </path>
  
  <path id="server.runtime.module.classpath">
    <pathelement location="${server.testoutput.dir}"/>
    <pathelement location="${server.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.server">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.server">
    <patternset refid="excluded.from.module.server"/>
  </patternset>
  
  
  <target name="compile.module.server" depends="compile.module.server.production,compile.module.server.tests" description="Compile module server"/>
  
  <target name="compile.module.server.production" description="Compile module server; production classes"/>
  
  <target name="compile.module.server.tests" depends="compile.module.server.production" description="compile module server; test classes" unless="skip.tests"/>
  
  <target name="clean.module.server" description="cleanup module">
    <delete dir="${server.output.dir}"/>
    <delete dir="${server.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.clients-java, clean.module.docs, clean.module.server" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.clients-java, compile.module.docs, compile.module.server" description="build all modules"/>
  
  <target name="all" depends="build.modules" description="build all"/>
</project>